
The Kademlia is both a Distributed Hash Table (DHT) of known and connected peers on the network, as well as a routing table for content and requests. 

The Swarm implementation of Kademlia provides the usual guarantees of logarithmic proportions in connectivity in routing. \cite{KADEMLIA}

\subsection{Records}

A peer record \emph{MUST} contain the \texttt{Address Pair} and the \texttt{Capabilities} of the peer. This data structure is known as the \texttt{BzzAddress}. It serializes as follows:

\begin{lstlisting}[numbers=none]
BZZADDRESS = LIST(OVERLAYADDRESS UNDERLAYADDRESS CAPABILITIES)
\end{lstlisting}

\subsection{Connectivity}

\subsubsection{Address matching} \label{address-matching}

For two addresses to match each other, their byte values must be identical.

For certain purposes in Swarm \emph{partial addresses} are used. A partial address is an address of less than 32 bytes. The bytes of a partial address always represent the most significant bytes of the full address that the partial address represents. A partial address matches a full address if all the bytes in the partial address are identical to the corresponding bytes in the full address. 

\subsubsection{Distance and proximity} \label{sec:distance-and-proximity}

In Swarm, differences between addresses are described in terms of \emph{Distance} and \emph{Proximity}.

The \emph{Distance} between two addresses is the value of the big-endian binary integer cast of the XOR of the two addresses.

For example, the distance between the addresses 1010 and 0111 will be $1011 ^ 0111 = 1100$, where the big-endian binary integer cast of $1100$ is $12$.

Another measure of difference \emph{Proximity}, which is the logarithmic distance between the addresses. Specifically we define the \texttt{Proximity Order}, which is index value of the most significant bit that differs between the two addresses.

For example, an address $0101$ will have a Proximity Order of $0$ compared to $1101$, a proximity Order of $1$ compared to $0011$, and a Proximity Order of $3$ compared to $0110$. \cite[p. 2]{SWARMNETWORK}

\subsubsection{Proximity Bin}

A Proximity Bin is the table row in the kademlia that contains all peers that have the corresponding proximity to the node. \ref{sec:distance-and-proximity}

As with the Proximity Order, a \emph{closer} Proximity Bin has a higher numeric value, and a \emph{farther} Proximity Bin has a lower numeric value.

\subsubsection{Neighborhood}

The Neighborhood of a node are the peers in the two closest Proximity Bins in which peers are known to the node. 

\subsubsection{Depth}

The Depth of a node's kademlia is found by the following method:

\begin{enumerate}
\item Find the two closest Proximity Bins that have at least one \emph{connected} peer.
\item Find the next farther Proximity Bin that has at least one \emph{connected} peer.
\item If found, the Depth is the numeric value of that bin plus one.
\item If not found, the depth is $0$.
\end{enumerate}

\subsubsection{Health}

A kademlia is healthy when:\footnote{Note that it is technically possible for a kademlia to be healthy even though the Depth is $0$.}

\begin{itemize}
\item All peers in the Neighborhood are connected
\item At least one peer in every Proximity Bin \emph{farther} than the Depth is connected.
\end{itemize}

\subsection{Content forwarding}

The rules for content forwarding apply to \emph{all} nodes on the content route. In this document we refer to these nodes \texttt{relaying nodes}. This includes the \emph{sender} and any \emph{receiver} nodes.

A node \emph{MUST} always forward content\footnote{This is done to make it more difficult to determine the true recipient of a message by traffic analysis}, \emph{unless} one of these criteria are fulfilled:

\begin{enumerate}
\item the recipient address of the content is a full 32-byte address, \emph{and} matches fully with the node's Swarm Overlay Address\footnote{In this case the recipient is already fully revealed to anyone observing the traffic}.
\item the message has been seen already, before a certain period of time has elapsed, currently defined as $10$ seconds. (see \ref{sec:message-digest})
\item the kademlia of the node is not \emph{healthy}
\end{enumerate}

Which peer or peers the node should forward to depends on the proximity of the node to the recipient address, aswell as the address type. See \ref{sec:address-matching} for details on address types.

\subsubsection{Routing with full address} \label{sec:routing-with-full-address}

By full address we mean that the recipient address contains the full 32 bytes of the intended recipient node.

\begin{enumerate}
\item If the recipient address falls within the \emph{most proximate bin} of the node, the content should be forwarded to \emph{all} the node's \emph{nearest neighbors}.
\item Otherwise the node \emph{MUST} attempt to send to exactly \emph{one} peer in the bin that is the closest match to the recipient.
\item If this is not successful, the node \emph{MUST} try to forward to each remaining peer in that bin in order from closest to farthest to the recipient, until one is successful.
\item If this is not successful, the node should retain the content and retry later.
\end{enumerate}

\subsubsection{Routing with partial address}

\begin{enumerate}
\item Identify the \emph{farthest} peer that matches the partial address.
\item If that peer is in the \emph{most proximate bin}, the content should be forwarded to \emph{all} the node's \emph{nearest neighbors}.
\item Otherwise, if the bitlength of the recipient address equals the proximity order of its matching bin, the content should be forwarded to \emph{all} peers that are in the matching bin or closer to the recipient\footnote{Notice that in this context, the matching bin becomes the \emph{most proximate bin}}.
\item Otherwise the bitlength of the recipient address is \emph{longer} than the promixity order of its matching bin. In this case the node \emph{MUST} attempt to send to exactly \emph{one} peer in the bin that is the closest match to the recipient address.
\item If this is not successful, the node \emph{MUST} try to forward to each remaining peer in that bin in order from closest to farthest to the recipient address, until one is successful.
\item If this is not successful, the node should retain the content and retry later.
\end{enumerate}

\subsubsection{Routing with empty address}

\begin{enumerate}
\item Content should be forwarded to \emph{all} peers.
\item If \emph{none} of the peers can successfully be forwarded to, the node should retain the content and retry later.
\end{enumerate}

\subsection{Evaluating recipients}

Any node receiving content has to evaluate whether it can be the intended recipient, or one of the indended recipients, of the content.

The first condition that must be fulfilled is a matching recipient address on the content. Matching may happen in one of two forms:

\paragraph{Literal matching}

As described in \ref{sec:routing-with-full-address}, if the full 32-byte recipient address matches the node address, the node is the only intended recipient and \emph{MUST} process the content.

If the recipient address is a partial address, and it matches the node address, the node \emph{may} be one of the intended recipients and \emph{MUST} process the content.

\paragraph{Proximity matching}

This method provides a way to send content with a full 32 byte recipient address to more than one recipient.\footnote{This is the matching method used for the \emph{Push Sync} feature, where content addressed chunks are routed to their neighborhood in the network.} The procedure is as follows.

\begin{enumerate}
\item The proximity order of the recipient address with respect to the node is calculated
\item If the proximity order is within the node's depth, the node \emph{may} be one of the intended recipient and \emph{MUST} process the content.
\end{enumerate}
