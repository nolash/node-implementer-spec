\subsection{pss}

The \texttt{pss} protocol consists of a single message type. The message type provides optional builtin encryption alternatives. It also contains information about how it should be routed in the Swarm network, and a topic which determines how the receiver should process the message's content.

For the moment, \texttt{pss} uses \texttt{Whisper} for builtin encryption. \cite{ETHWIKI:WHISPER} \emph{this may change in the future}. For this reason, it is advisable that any \texttt{Whisper}-related parts of your \texttt{pss} implementation are fully compartmentalized, so they can be replaced with as little effort and impact on the implementation as possible.

\subsubsection{Address}

An arbirary fragment of a Swarm Overlay Address:

\begin{lstlisting}[numbers=none]
PSSADDRESS	= 0*32OCTET
\end{lstlisting}

\subsubsection{Control flag}

The \texttt{Control} byte is a bit field that allows the sender to specify certain conditions for the processing of the message. These are currently:

\begin{lstlisting}[numbers=none]
PSSCONTROLSYMMETRIC	= %x01 // the message uses builtin symmetric encryption
PSSCONTROLRAW		= %x02 // the message does not use builtin encryption
PSSFLAG			= PSSCONTROLSYMMETRIC / PSSCONTROLRAW
\end{lstlisting}

If the \texttt{Raw} control bit is set, builtin encryption is not used. 

\subsubsection{Whisper Envelope} 

It is out of scope of this document to discuss implementation details of Whisper. However, the \texttt{RLP} serialization of a \texttt{pss} message also includes the serialization of the \texttt{Whisper} envelope. Therefore, we include a description of the \texttt{RLP} serialization of the \texttt{Whisper} envelope, as it relates to the serialization of the \texttt{pss} message.

\begin{lstlisting}[numbers=none]
expiry		= TIMESTAMP	// ignored
ttl		= UINT32	// ignored
topic		= 4OCTET
data		= *OCTET
nonce		= UINT64	// ignored

PSSENVELOPE	= LIST(expiry ttl topic data nonce)
\end{lstlisting}

The fields marked as \texttt{ignored} are not used by \texttt{pss}. But they are still part of the \texttt{RLP} serialization of the envelope. If builtin encryption is being used, they may contain values inserted by Whisper as it encrypts the envelope.\footnote{In the \texttt{geth} implementation of \texttt{Whisper} it is not possible to encrypt a message \emph{without} performing any \emph{Proof-of-Work}. \texttt{pss} sets the \texttt{PoW} parameter to $10^{-10}$, which effectively reduces the amount of work done to zero. On decryption, \emph{pss} \emph{ignores} the \texttt{PoW} value derived from the \texttt{Whisper} envelope.}

\texttt{Topic} is used to determine whether or not the message is relevant for a receiver, and which code the receiver should used to process the message.\footnote{Note that the \texttt{Topic} is \emph{not} used for the same purpose in \texttt{pss} as it is in Whisper.}

\texttt{Data} contains the actual message Payload.

\subsubsection{Pss message}

Finally we can assemble the actual wire format that encapsulates a single \texttt{pss} message:

\begin{lstlisting}[numbers=none]
to		= PSSADDRESS
control		= PSSFLAG
expire		= TIMESTAMP
payload		= PSSENVELOPE

PSSMESSAGE	= LIST(to control expire payload)
\end{lstlisting}

The \texttt{expire} Messages encountered later than the time represented by the value of \texttt{expire} \emph{MUST NOT} be routed or processed.

In this case, the \texttt{Data} field in the envelope simply consists of the literal byte data of the message payload.

No \texttt{Whisper} functions are executed on the envelope. 


\subsubsection{Message handling}

A \emph{receiver} of a message is any node whose address matchs the address of the message, and who is able to decipher the contents.

Whether or not a node should process a message, and \emph{how} it should process it, depends on several factors:

\begin{itemize}
\item parameters in the message
\item \texttt{pss} node configurations
\end{itemize}

This decision algorithm consists of the following sequential steps:

\paragraph{Addressing}

The receiving node's Swarm Overlay Address \emph{MUST} match the \texttt{To} field of the \texttt{pss} message.

In case the \texttt{To} field is a \emph{partial} address, the partial address \emph{MUST} match the corresponding part of the node's address.

If the \texttt{To} address is an \emph{empty} address, the address automatically matches.

\paragraph{Topic}

A \texttt{pss} node \emph{MUST} choose which code to execute based on the message's \texttt{Topic}.

We can think of a \texttt{Topic} as an identifier of a particular \emph{application} interfacing with the node. The application subscribes to contents of messages received by the node that have that certain \texttt{Topic}.

If a \texttt{pss} node has no actions registered to the topic of the message, the message \emph{MUST NOT} be processed.

\paragraph{Encryption}

Handler code for a \texttt{Topic} \emph{MAY OR MAY NOT} allow messages sent without built-in encryption.

If only built-in encryption is allowed, \emph{whether} and \emph{how} to handle the message \emph{MUST} depend on:

\begin{itemize}
\item Whether the message encrypted using symmetric encryption or public key encryption.
\item Whether the node can successfully decrypt the message.
\end{itemize}

Handling code \emph{SHOULD} only be registered for one single encryption scheme.

For example, if handler code is registered to messages encrypted with symmetric key $S_1$ and \emph{Topic} $T$, and the node receives a message with topic $T$ encrypted with public key $P_1pub$, and the node knows the private key $P_1priv$, the message \emph{SHOULD NOT} be processed.

\subsubsection{Message routing}

\texttt{pss} uses the same kademlia table for routing decisions that the Swarm node uses for content routing. \cite[p. 2]{SWARMNETWORK}

Messages \emph{MUST} only be forwarded to nodes that are running a matching version of \texttt{pss}.

\subsubsection{Message digest} \label{sec:message-digest}

In order to identify messages that have already been seen, a message digest is computed on the message by every relaying node. 

\todo{currently this serialization is based on RLP. This must change}

The digest is the \emph{KECCAK256 hash} of the serialization of the message defined as follows:


